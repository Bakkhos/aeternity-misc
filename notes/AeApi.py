from collections import namedtuple

Api = namedtuple("Api", ["name", "doc", "params", "responses", "endpoint", "http_method"])
FieldDef = namedtuple("FieldDef", ["required", "type", "values", "minimum", "maximum", "default"])
Param = namedtuple("Param", ["name", "raw", "pos", "field"])
Resp = namedtuple("Resp", ["schema", "desc"])

methods = [Api(name='get_top_block', doc='Get the top block (either key or micro block)', params=[], responses={200: Resp(schema='KeyBlockOrMicroBlockHeader', desc='Successful operation'), 404: Resp(schema='Error', desc='Block not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/blocks/top', http_method='get'),
 Api(name='get_current_key_block', doc='Get the current key block', params=[], responses={200: Resp(schema='KeyBlock', desc='Successful operation'), 404: Resp(schema='Error', desc='Block not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/key-blocks/current', http_method='get'),
 Api(name='get_current_key_block_hash', doc='Get the hash of the current key block', params=[], responses={200: Resp(schema='inline_response_200', desc='Successful operation'), 404: Resp(schema='Error', desc='Block not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/key-blocks/current/hash', http_method='get'),
 Api(name='get_current_key_block_height', doc='Get the height of the current key block', params=[], responses={200: Resp(schema='inline_response_200_1', desc='Successful operation'), 404: Resp(schema='Error', desc='Block not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/key-blocks/current/height', http_method='get'),
 Api(name='get_pending_key_block', doc='Get the pending key block', params=[], responses={200: Resp(schema='KeyBlock', desc='Successful operation'), 404: Resp(schema='Error', desc='Block not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/key-blocks/pending', http_method='get'),
 Api(name='get_key_block_by_hash', doc='Get a key block by hash', params=[Param(name='hash', raw='hash', pos='path', field=FieldDef(required=True, type='string', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='KeyBlock', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid hash'), 404: Resp(schema='Error', desc='Block not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/key-blocks/hash/{hash}', http_method='get'),
 Api(name='get_key_block_by_height', doc='Get a key block by height', params=[Param(name='height', raw='height', pos='path', field=FieldDef(required=True, type='integer', values=[], minimum=0, maximum=None, default=None))], responses={200: Resp(schema='KeyBlock', desc='Successful operation'), 404: Resp(schema='Error', desc='Block not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/key-blocks/height/{height}', http_method='get'),
 Api(name='post_key_block', doc='Post a mined key block', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/KeyBlock', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid block')}, endpoint='https://sdk-edgenet.aepps.com/v2/key-blocks', http_method='post'),
 Api(name='get_micro_block_header_by_hash', doc='Get a micro block header by hash', params=[Param(name='hash', raw='hash', pos='path', field=FieldDef(required=True, type='string', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='MicroBlockHeader', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid hash'), 404: Resp(schema='Error', desc='Block not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/micro-blocks/hash/{hash}/header', http_method='get'),
 Api(name='get_micro_block_transactions_by_hash', doc='Get micro block transactions by hash', params=[Param(name='hash', raw='hash', pos='path', field=FieldDef(required=True, type='string', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='GenericTxs', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid hash'), 404: Resp(schema='Error', desc='Block not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/micro-blocks/hash/{hash}/transactions', http_method='get'),
 Api(name='get_micro_block_transaction_by_hash_and_index', doc='Get a micro block transaction by hash and index', params=[Param(name='hash', raw='hash', pos='path', field=FieldDef(required=True, type='string', values=[], minimum=None, maximum=None, default=None)), Param(name='index', raw='index', pos='path', field=FieldDef(required=True, type='integer', values=[], minimum=1, maximum=None, default=None))], responses={200: Resp(schema='GenericSignedTx', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid hash or index'), 404: Resp(schema='Error', desc='Block not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/micro-blocks/hash/{hash}/transactions/index/{index}', http_method='get'),
 Api(name='get_micro_block_transactions_count_by_hash', doc='Get micro block transaction count by hash', params=[Param(name='hash', raw='hash', pos='path', field=FieldDef(required=True, type='string', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='inline_response_200_2', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid hash'), 404: Resp(schema='Error', desc='Block not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/micro-blocks/hash/{hash}/transactions/count', http_method='get'),
 Api(name='get_current_generation', doc='Get the current generation', params=[], responses={200: Resp(schema='Generation', desc='Successful operation'), 404: Resp(schema='Error', desc='Generation not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/generations/current', http_method='get'),
 Api(name='get_generation_by_hash', doc='Get a generation by hash', params=[Param(name='hash', raw='hash', pos='path', field=FieldDef(required=True, type='string', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='Generation', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid hash'), 404: Resp(schema='Error', desc='Generation not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/generations/hash/{hash}', http_method='get'),
 Api(name='get_generation_by_height', doc='Get a generation by height', params=[Param(name='height', raw='height', pos='path', field=FieldDef(required=True, type='integer', values=[], minimum=0, maximum=None, default=None))], responses={200: Resp(schema='Generation', desc='Successful operation'), 404: Resp(schema='Error', desc='Generation not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/generations/height/{height}', http_method='get'),
 Api(name='get_account_by_pubkey', doc='Get an account by public key', params=[Param(name='pubkey', raw='pubkey', pos='path', field=FieldDef(required=True, type='string', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='Account', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid public key'), 404: Resp(schema='Error', desc='Account not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/accounts/{pubkey}', http_method='get'),
 Api(name='get_pending_account_transactions_by_pubkey', doc='Get pending account transactions by public key', params=[Param(name='pubkey', raw='pubkey', pos='path', field=FieldDef(required=True, type='string', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='GenericTxs', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid public key'), 404: Resp(schema='Error', desc='Account not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/accounts/{pubkey}/transactions/pending', http_method='get'),
 Api(name='get_transaction_by_hash', doc='Get a transaction by hash', params=[Param(name='hash', raw='hash', pos='path', field=FieldDef(required=True, type='string', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='GenericSignedTx', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid hash'), 404: Resp(schema='Error', desc='Transaction not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/transactions/{hash}', http_method='get'),
 Api(name='get_transaction_info_by_hash', doc='Get a transaction info by hash', params=[Param(name='hash', raw='hash', pos='path', field=FieldDef(required=True, type='string', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='ContractCallObject', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid hash'), 404: Resp(schema='Error', desc='Transaction not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/transactions/{hash}/info', http_method='get'),
 Api(name='post_transaction', doc='Post a new transaction', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/Tx', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='PostTxResponse', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid transaction')}, endpoint='https://sdk-edgenet.aepps.com/v2/transactions', http_method='post'),
 Api(name='get_contract', doc='Get a contract by pubkey', params=[Param(name='pubkey', raw='pubkey', pos='path', field=FieldDef(required=True, type='string', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='ContractObject', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid pubkey'), 404: Resp(schema='', desc='Contract not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/contracts/{pubkey}', http_method='get'),
 Api(name='get_contract_code', doc='Get contract code by pubkey', params=[Param(name='pubkey', raw='pubkey', pos='path', field=FieldDef(required=True, type='string', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='ByteCode', desc='Contract code'), 400: Resp(schema='Error', desc='Invalid pubkey'), 404: Resp(schema='Error', desc='Contract not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/contracts/{pubkey}/code', http_method='get'),
 Api(name='get_contract_store', doc='Get contract store by pubkey', params=[Param(name='pubkey', raw='pubkey', pos='path', field=FieldDef(required=True, type='string', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='ContractStore', desc='Contract Store'), 400: Resp(schema='Error', desc='Invalid pubkey'), 404: Resp(schema='', desc='Contract not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/contracts/{pubkey}/store', http_method='get'),
 Api(name='get_contract_po_i', doc='Get a proof of inclusion for a contract', params=[Param(name='pubkey', raw='pubkey', pos='path', field=FieldDef(required=True, type='string', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='PoI', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid contract key'), 404: Resp(schema='Error', desc='Contract not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/contracts/{pubkey}/poi', http_method='get'),
 Api(name='get_oracle_by_pubkey', doc='Get an oracle by public key', params=[Param(name='pubkey', raw='pubkey', pos='path', field=FieldDef(required=True, type='string', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='RegisteredOracle', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid public key'), 404: Resp(schema='Error', desc='Oracle not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/oracles/{pubkey}', http_method='get'),
 Api(name='get_oracle_queries_by_pubkey', doc='Get oracle queries by public key', params=[Param(name='pubkey', raw='pubkey', pos='path', field=FieldDef(required=True, type='string', values=[], minimum=None, maximum=None, default=None)), Param(name='_from', raw='from', pos='query', field=FieldDef(required=False, type='string', values=[], minimum=None, maximum=None, default=None)), Param(name='limit', raw='limit', pos='query', field=FieldDef(required=False, type='integer', values=[], minimum=1, maximum=1000, default=None)), Param(name='type', raw='type', pos='query', field=FieldDef(required=False, type='string', values=['open', 'closed', 'all'], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='OracleQueries', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid public key'), 404: Resp(schema='Error', desc='Oracle not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/oracles/{pubkey}/queries', http_method='get'),
 Api(name='get_oracle_query_by_pubkey_and_query_id', doc='Get an oracle query by public key and query ID', params=[Param(name='pubkey', raw='pubkey', pos='path', field=FieldDef(required=True, type='string', values=[], minimum=None, maximum=None, default=None)), Param(name='query-id', raw='query-id', pos='path', field=FieldDef(required=True, type='string', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='OracleQuery', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid public key or query ID'), 404: Resp(schema='Error', desc='Oracle query not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/oracles/{pubkey}/queries/{query-id}', http_method='get'),
 Api(name='get_name_entry_by_name', doc='Get name entry from naming system', params=[Param(name='name', raw='name', pos='path', field=FieldDef(required=True, type='string', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='NameEntry', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid name'), 404: Resp(schema='Error', desc='Name not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/names/{name}', http_method='get'),
 Api(name='get_channel_by_pubkey', doc='Get channel by public key', params=[Param(name='pubkey', raw='pubkey', pos='path', field=FieldDef(required=True, type='string', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='Channel', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid public key'), 404: Resp(schema='Error', desc='Channel not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/channels/{pubkey}', http_method='get'),
 Api(name='get_peer_pubkey', doc='Get peer public key', params=[], responses={200: Resp(schema='inline_response_200_3', desc='Successful operation')}, endpoint='https://sdk-edgenet.aepps.com/v2/peers/pubkey', http_method='get'),
 Api(name='get_status', doc='Get the status of a node', params=[], responses={200: Resp(schema='Status', desc='Successful operation')}, endpoint='https://sdk-edgenet.aepps.com/v2/status', http_method='get'),
 Api(name='post_contract_create', doc='Get a contract_create transaction object', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/ContractCreateTx', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='CreateContractUnsignedTx', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid transaction'), 404: Resp(schema='Error', desc='Owner account not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/contracts/create', http_method='post'),
 Api(name='post_contract_create_compute', doc='Compute the call_data for SOPHIA and get a contract_create transaction object', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/ContractCreateCompute', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='CreateContractUnsignedTx', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid transaction'), 404: Resp(schema='Error', desc='Owner account not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/contracts/create/compute', http_method='post'),
 Api(name='post_contract_call', doc='Get a contract_call transaction object', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/ContractCallTx', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='UnsignedTx', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid transaction'), 404: Resp(schema='Error', desc='Caller account or contract not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/contracts/call', http_method='post'),
 Api(name='post_contract_call_compute', doc='Compute the call_data for SOPHIA and get contract_call transaction object', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/ContractCallCompute', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='UnsignedTx', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid transaction'), 404: Resp(schema='Error', desc='Caller account or contract not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/contracts/call/compute', http_method='post'),
 Api(name='post_oracle_register', doc='Get a oracle_register transaction object', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/OracleRegisterTx', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='UnsignedTx', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid transaction'), 404: Resp(schema='Error', desc='Account not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/oracles/register', http_method='post'),
 Api(name='post_oracle_extend', doc='Get an oracle_extend transaction object', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/OracleExtendTx', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='UnsignedTx', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid transaction'), 404: Resp(schema='Error', desc='Account not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/oracles/extend', http_method='post'),
 Api(name='post_oracle_query', doc='Get an oracle_query transaction object', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/OracleQueryTx', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='UnsignedTx', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid transaction'), 404: Resp(schema='Error', desc='Account or oracle not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/oracles/query', http_method='post'),
 Api(name='post_oracle_respond', doc='Get an oracle_response transaction object', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/OracleRespondTx', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='UnsignedTx', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid transaction'), 404: Resp(schema='Error', desc='Oracle or query not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/oracles/respond', http_method='post'),
 Api(name='post_name_preclaim', doc='Get a name_preclaim transaction object', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/NamePreclaimTx', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='UnsignedTx', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid transaction'), 404: Resp(schema='Error', desc='Account not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/names/preclaim', http_method='post'),
 Api(name='post_name_claim', doc='Get a name_claim transaction object', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/NameClaimTx', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='UnsignedTx', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid transaction'), 404: Resp(schema='Error', desc='Account or name not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/names/claim', http_method='post'),
 Api(name='post_name_update', doc='Get a name_update transaction object', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/NameUpdateTx', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='UnsignedTx', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid transaction'), 404: Resp(schema='Error', desc='Account or oracle not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/names/update', http_method='post'),
 Api(name='post_name_transfer', doc='Get a name_transfer transaction object', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/NameTransferTx', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='UnsignedTx', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid transaction'), 404: Resp(schema='Error', desc='Account or name not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/names/transfer', http_method='post'),
 Api(name='post_name_revoke', doc='Get a name_revoke transaction object', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/NameRevokeTx', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='UnsignedTx', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid transaction'), 404: Resp(schema='Error', desc='Account or name not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/names/revoke', http_method='post'),
 Api(name='post_spend', doc='Get a spend transaction object', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/SpendTx', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='UnsignedTx', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid transaction'), 404: Resp(schema='Error', desc='Sender account not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/transactions/spend', http_method='post'),
 Api(name='post_channel_create', doc='Get a channel_create transaction object', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/ChannelCreateTx', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='UnsignedTx', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid transaction'), 404: Resp(schema='Error', desc='Initiator not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/channels/create', http_method='post'),
 Api(name='post_channel_deposit', doc='Get a channel_deposit transaction object', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/ChannelDepositTx', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='UnsignedTx', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid transaction')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/channels/deposit', http_method='post'),
 Api(name='post_channel_withdraw', doc='Get a channel_withdrawal transaction object', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/ChannelWithdrawTx', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='UnsignedTx', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid transaction')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/channels/withdraw', http_method='post'),
 Api(name='post_channel_snapshot_solo', doc='Get a channel_snapshot_solo transaction object', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/ChannelSnapshotSoloTx', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='UnsignedTx', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid transaction')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/channels/snapshot/solo', http_method='post'),
 Api(name='post_channel_close_mutual', doc='Get a channel_close_mutual transaction object', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/ChannelCloseMutualTx', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='UnsignedTx', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid transaction')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/channels/close/mutual', http_method='post'),
 Api(name='post_channel_close_solo', doc='Get a channel_close_solo transaction object', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/ChannelCloseSoloTx', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='UnsignedTx', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid transaction')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/channels/close/solo', http_method='post'),
 Api(name='post_channel_slash', doc='Get a channel_slash transaction object', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/ChannelSlashTx', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='UnsignedTx', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid transaction')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/channels/slash', http_method='post'),
 Api(name='post_channel_settle', doc='Get a channel_settle transaction object', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/ChannelSettleTx', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='UnsignedTx', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid transaction')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/channels/settle', http_method='post'),
 Api(name='get_pending_transactions', doc='Get pending transactions', params=[], responses={200: Resp(schema='GenericTxs', desc='Successful operation')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/transactions/pending', http_method='get'),
 Api(name='get_commitment_id', doc='Compute commitment ID for a given salt and name', params=[Param(name='name', raw='name', pos='query', field=FieldDef(required=True, type='string', values=[], minimum=None, maximum=None, default=None)), Param(name='salt', raw='salt', pos='query', field=FieldDef(required=True, type='integer', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='CommitmentId', desc='Successful operation'), 400: Resp(schema='Error', desc='Invalid name')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/names/commitment-id', http_method='get'),
 Api(name='get_node_beneficiary', doc="Get node's beneficiary public key", params=[], responses={200: Resp(schema='PubKey', desc='Successful operation')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/accounts/beneficiary', http_method='get'),
 Api(name='get_node_pubkey', doc="Get node's public key", params=[], responses={200: Resp(schema='PubKey', desc='Successful operation'), 404: Resp(schema='Error', desc='Public key not found')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/accounts/node', http_method='get'),
 Api(name='get_peers', doc='Get node Peers', params=[], responses={200: Resp(schema='Peers', desc='successful operation'), 403: Resp(schema='Error', desc='Info not enabled')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/peers', http_method='get'),
 Api(name='compile_contract', doc='Compile a sophia contract from source and return byte code', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/Contract', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='ByteCode', desc='Byte code response'), 403: Resp(schema='Error', desc='Invalid contract')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/contracts/code/compile', http_method='post'),
 Api(name='call_contract', doc='Call a sophia function with a given name and argument in the given bytecode off chain.', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/ContractCallInput', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='CallResult', desc='Resulting state map'), 403: Resp(schema='Error', desc='Invalid contract')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/contracts/code/call', http_method='post'),
 Api(name='dry_run_txs', doc='Dry-run transactions on top of a given block. Supports SpendTx, ContractCreateTx and ContractCallTx', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/DryRunInput', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='DryRunResults', desc='Dry-run result'), 403: Resp(schema='Error', desc='Invalid input')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/transactions/dry-run', http_method='post'),
 Api(name='decode_data', doc='Decode Sophia return data encoded according to Sophia ABI.', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/SophiaBinaryData', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='SophiaJsonData', desc='Json encoded data'), 400: Resp(schema='Error', desc='Invalid data')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/contracts/code/decode-data', http_method='post'),
 Api(name='encode_calldata', doc='Encode sophia data and function name according to sophia ABI.', params=[Param(name='body', raw='body', pos='body', field=FieldDef(required=True, type='#/definitions/ContractCallInput', values=[], minimum=None, maximum=None, default=None))], responses={200: Resp(schema='Calldata', desc='Binary ecoded calldata'), 403: Resp(schema='Error', desc='Invalid contract')}, endpoint='https://sdk-edgenet.aepps.com/v2/debug/contracts/code/encode-calldata', http_method='post')]

